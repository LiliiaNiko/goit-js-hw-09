{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEmBC,SAASC,cAAc,uBACxBD,SAASC,cAAc,sBACrBD,SAASC,cAAc,wBAK3C,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAGtCC,YAAW,WACLH,GACFF,EAAQ,uBAAwCM,OAAfT,EAAS,QAAYS,OAANR,EAAM,OAEpDG,EAAK,sBAAqCK,OAAfT,EAAS,QAAYS,OAANR,EAAM,SACjDA,MAdIJ,SAASC,cAAc,SAkB/BY,iBAAiB,UAAU,SAACC,GAC/BA,EAAIC,iBAEJ,IADA,IAA+DC,EAAjBF,EAAIG,cAA1CC,SAAYd,EAAKY,EAALZ,MAAOe,EAAIH,EAAJG,KAAMC,EAAMJ,EAANI,OACxBC,EAAI,EAAGA,GAAKD,EAAOE,MAAOD,IAEjCnB,EAAcmB,EAAGE,SAASnB,EAAMkB,OAASC,SAASJ,EAAKG,QACpDE,MAAK,SAACC,GACLC,EAAA5B,GAAS6B,OAAOC,QAAQH,GACxBI,QAAQC,IAAIL,MAEbM,OAAM,SAACC,GACNN,EAAA5B,GAAS6B,OAAOM,QAAQD,GACxBH,QAAQC,IAAIE,S","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\nconst form = document.querySelector('.form');\n\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    //delay = delayInput + stepInput;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      }\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }, delay);\n  })\n}\n\nform.addEventListener('submit', (evt) => {\n  evt.preventDefault();\n  const { elements: { delay, step, amount } } = evt.currentTarget;\n  for (let i = 1; i <= amount.value; i++) {\n         \n    createPromise(i, parseInt(delay.value) + parseInt(step.value))\n      .then((result) => {\n        Notiflix.Notify.success(result);\n        console.log(result)\n  })\n      .catch((error) => {\n        Notiflix.Notify.failure(error);\n        console.log(error)\n      });\n    \n  }\n  \n})\n"],"names":["$iU1Pc","parcelRequire","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","concat","addEventListener","evt","preventDefault","_elements","currentTarget","elements","step","amount","i","value","parseInt","then","result","$parcel$interopDefault","Notify","success","console","log","catch","error","failure"],"version":3,"file":"03-promises.5b2ebc42.js.map"}